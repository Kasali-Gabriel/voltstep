generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "mongodb"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  email           String          @unique
  firstName       String
  lastName        String
  imageUrl        String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  clerkUserId     String?
  wishList        WishList[]      @relation("UserToWishList")
  reviews         Review[]        @relation("UserReviews")
  orders          Order[]
  viewedProducts  ViewedProduct[] @relation("UserViewedProducts")
  searchHistories SearchHistory[] @relation("UserSearchHistories")
}

model Catalog {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  slug       String
  categories Category[] @relation("CatalogCategories")

  @@map("catalog")
}

model Category {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  slug           String
  parentCategory String?
  subcategories  Subcategory[] @relation("CategorySubcategories")
  catalogId      String        @db.ObjectId
  catalog        Catalog       @relation("CatalogCategories", fields: [catalogId], references: [id])
}

model Subcategory {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  slug           String
  parentCategory String?
  categoryId     String    @db.ObjectId
  category       Category  @relation("CategorySubcategories", fields: [categoryId], references: [id])
  products       Product[]
}

model Product {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  slug          String      @unique
  description   String
  price         Float
  quantity      Int
  images        String[]
  sizes         String[]
  colors        String[]
  tags          Tag[]
  reviews       Review[]
  subcategoryId String      @db.ObjectId
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  orderItems    OrderItem[]
  wishLists     WishList[]  @relation("ProductToWishList")
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  reviewerId String   @db.ObjectId
  reviewer   User     @relation("UserReviews", fields: [reviewerId], references: [id])
  rating     Int
  title      String
  details    String
  date       DateTime
  productId  String   @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id])
  verified   Boolean  @default(false)
}

model Order {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)
}

model WishList {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  user          User     @relation("UserToWishList", fields: [userId], references: [id])
  productId     String   @db.ObjectId
  product       Product  @relation("ProductToWishList", fields: [productId], references: [id])
  selectedSize  String?
  selectedColor String?
  createdAt     DateTime @default(now())

  @@unique([userId, productId])
}

model PopularSearch {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  query        String   @unique
  count        Int      @default(1)
  lastSearched DateTime @default(now())
}

enum Tag {
  NEW_ARRIVAL
  BESTSELLER
  FLASH_SALE
  BACK_IN_STOCK
}

model SearchHistory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  user       User     @relation("UserSearchHistories", fields: [userId], references: [id])
  query      String
  searchedAt DateTime @default(now())

  @@unique([userId, query])
  @@index([userId, searchedAt])
}

model ViewedProduct {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId   String   @db.ObjectId
  user     User     @relation("UserViewedProducts", fields: [userId], references: [id])
  viewedAt DateTime @default(now())
  product  Json
  slug     String

  @@unique([userId, slug])
  @@index([userId, viewedAt])
}
